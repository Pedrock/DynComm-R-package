
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "DynComm"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "DynComm-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('DynComm')
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

code for methods in class “Rcpp_DynCommRcpp” was not checked for suspicious field assignments (recommended package ‘codetools’ not available?)
code for methods in class “Rcpp_DynCommRcpp” was not checked for suspicious field assignments (recommended package ‘codetools’ not available?)
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ALGORITHM")
> ### * ALGORITHM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ALGORITHM
> ### Title: List of available algorithms.
> ### Aliases: ALGORITHM algorithm Algorithm
> ### Keywords: datasets
> 
> ### ** Examples
> 
> ALGORITHM$LOUVAIN
[1] 1
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ALGORITHM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CRITERION")
> ### * CRITERION
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CRITERION
> ### Title: List of available CRITERION (quality measurement functions).
> ### Aliases: CRITERION criterion Criterion
> ### Keywords: datasets
> 
> ### ** Examples
> 
> CRITERION$MODULARITY
[1] 1
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CRITERION", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DynComm")
> ### * DynComm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DynComm
> ### Title: DynComm
> ### Aliases: DynComm
> 
> ### ** Examples
> 
> Parameters<-matrix(c("e","0.1","w", "FALSE"),ncol=2, byrow=TRUE)
> dc<-DynComm(ALGORITHM$LOUVAIN,CRITERION$MODULARITY,Parameters)
> dc$addRemoveEdges(
+ matrix(
+ c(10,20,10,30,20,30,30,60,40,60,40,50,50,70,60,70)
+ ,ncol=2,byrow=TRUE)
+ )
[1] TRUE
> ## or
> ## dc$addRemoveEdges("initial_graph.txt")
> dc$communityCount()
[1] 2
> ## You can use the non inline version of the functions
> communities.DynComm(dc)
[1] 10 40
> ## Several alias have been defined.
> ## In this case, communityNodeCount is alias of communityVertexCount
> dc$communityNodeCount(10)
[1] 3
> dc$communityNeighbours(10)
     neighbour weight
[1,]        40      1
> dc$communityInnerEdgesWeight(10)
[1] 6
> dc$communityTotalWeight(10)
[1] 7
> dc$communityEdgeWeight(10,40)
[1] 1
> dc$community(10) ##this parameter is a vertex not a community. Do not confuse them 
[1] 10
> dc$vertices(10)
[1] 10 20 30
> dc$communityMapping(TRUE)
     [,1] [,2]
[1,]   10   10
[2,]   20   10
[3,]   30   10
[4,]   40   40
[5,]   50   40
[6,]   60   40
[7,]   70   40
> dc$quality()
[1] 0.3671875
> dc$mytime()
[1] 2249659
> ## lets add post processing :)
> dc$postProcess(
+ list(
+ list(POSTPROCESSING$DENSOPT)
+ )
+ )
Modularity is implemented for undirected graphs only.
Modularity is implemented for undirected graphs only.
Modularity is implemented for undirected graphs only.
[1] TRUE
> ## the results of the last step of post processing are selected automatically
> ## densopt post processing algorithm may change the community mapping so...
> ## check it
> dc$communityMapping(TRUE)
     vertex community
> ## densopt post processing algorithm may change quality so check it
> dc$quality()
[1] 0.3671875
> ## time is now the total time of the main algorithm plus the time of every...
> ## post processing algorithm up to the one selected
> dc$mytime()
[1] 18504123
> ## get back to main algorithm results to check they haven't changed
> dc$select(POSTPROCESSING$NONE)
[1] TRUE
> dc$communityMapping(TRUE)
     [,1] [,2]
[1,]   10   10
[2,]   20   10
[3,]   30   10
[4,]   40   40
[5,]   50   40
[6,]   60   40
[7,]   70   40
> dc$quality()
[1] 0.3671875
> dc$mytime()
[1] 2249659
> ## add and remove edges. Notice that there is one more column to give...
> ## weights of zero on the edges to remove. In this case, all other weights...
> ## are ignored because the graph is set to ignore weights (parameter w is...
> ## false).
> dc$addRemoveEdges(
+ matrix(
+ c(30,60,0,40,60,0.23,10,80,2342,80,90,3.1415)
+ ,ncol=3,byrow=TRUE)
+ )
Modularity is implemented for undirected graphs only.
Modularity is implemented for undirected graphs only.
Modularity is implemented for undirected graphs only.
[1] TRUE
> ## since the post processing was not reset, it will be automatically...
> ## calculated and results switched to the last step. In this case, to the...
> ## densopt algorithm
> dc$communityMapping(TRUE)
     vertex community
> dc$quality()
[1] 0.4197531
> dc$mytime()
[1] 16290214
> ## get back to main algorithm results to check them
> dc$select(POSTPROCESSING$NONE)
[1] TRUE
> dc$communityMapping(TRUE)
      [,1] [,2]
 [1,]   10   10
 [2,]   20   20
 [3,]   30   20
 [4,]   40   40
 [5,]   50   40
 [6,]   60   40
 [7,]   70   40
 [8,]   80   10
 [9,]   90   10
> dc$quality()
[1] 0.003590343
> dc$mytime()
[1] 6269862
> ## lets reset/remove post processing
> dc$postProcess()
[1] TRUE
> 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("DynComm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("DynCommMain")
> ### * DynCommMain
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: DynCommMain
> ### Title: DynCommMain
> ### Aliases: DynCommMain
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## No test: 
> Parameters<-matrix(c("-e","0.1"),1,2,TRUE)
> dc<-DynCommMain(ALGORITHM$LOUVAIN,CRITERION$MODULARITY,Parameters)
> dc$addRemoveEdgesFile("initial_graph.txt")
[1] FALSE
> dc$communityCount()
[1] 0
> dc$communities()
numeric(0)
> dc$communityNodeCount(1)
Error: attempt to apply non-function
Execution halted
