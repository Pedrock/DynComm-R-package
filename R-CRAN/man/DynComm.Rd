% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DynComm.R
\docType{class}
\name{DynComm}
\alias{DynComm}
\alias{Dyncomm}
\alias{dyncomm}
\title{DynComm}
\usage{
DynComm(Algorithm,Criterion,Parameters)
}
\arguments{
\item{Algorithm}{One of the available ALGORITHM See \code{\link{ALGORITHM}}}

\item{Criterion}{One of the available CRITERION. See \code{\link{CRITERION}}}

\item{Parameters}{A two column matrix defining additional parameters. See
the PARAMETERS section on this page}
}
\value{
\code{DynComm} object
}
\description{
Provides a single interface for all algorithms in the different 
languages.
Includes methods to get results of processing and to interact with the 
vertices, edges and communities.
}
\section{PARAMETERS}{

A two column matrix defining additional parameters to be passed to the
selected ALGORITHM and CRITERION.
The first column names the parameter and the second defines its value.
\describe{
  \item{
  -c
  }{
  Owsinski-Zadrozny quality function parameter. Values [0.0:1.0]. Default: 0.5
  }
  \item{
  -k
  }{
  Shi-Malik quality function kappa_min value. Value > 0 . Default 1
  }
  \item{
  -w
  }{
  Treat graph as weighted. In other words, do not ignore weights for edges 
  that define them when inserting edges in the graph.
  A weight of exactly zero removes the edge instead of inserting so its
  weight is never ignored.
  Without this parameter defined or for edges that do not have a weight defined, 
  edges are assigned the default value of 1 (one).
  As an example, reading from a file may define weights (a third column) for
  some edges (defined in rows, one per row) and not for others. With this
  parameter defined, the edges that have weights that are not exactly zero,
  have their weight replaced by the default value.
  }
  \item{
  -e
  }{
  Stops when, on a cycle of the algorithm, the quality is increased by less 
  than the value given in this parameter.
  }
}
}

\section{Methods}{

\describe{

  

  \item{addRemoveEdgesFile(graphAddRemoveFile)}{Add and remove edges read from a file. See \link{addRemoveEdgesFile}}
  

  \item{quality()}{Get the quality measurement of the graph after the last iteration. See \link{quality}}
  

  \item{communityCount()}{Get the number of communities after the last iteration. See \link{communityCount}}
  

  \item{communities()}{Get all communities after the last iteration. See \link{communities}}
  

  \item{communityInnerEdgesWeight(community)}{Get the sum of weights of the inner edges of the given community after the last iteration. See \link{communityInnerEdgesWeight}}
  

  \item{communityTotalWeight(community)}{Get the sum of weights of all edges of the given community after the last iteration. See \link{communityTotalWeight}}
  

  \item{communityEdgeWeight(source,destination)}{Get the weight of the edge that goes from source to destination after the last iteration. See \link{communityEdgeWeight}}
  

  \item{communityVertexCount(community)}{Get the amount of vertices in the given community after the last iteration. See \link{communityVertexCount}}
  

  \item{communityNodeCount(community)}{Alias for communityVertexCount(). See \link{communityVertexCount}}
  

  \item{community(vertex)}{Get the community of the given vertex after the last iteration. See \link{community}}
  

  \item{vertexCount()}{Get the total number of vertices after the last iteration. See \link{vertexCount}}
  

  \item{nodesCount()}{Alias for vertexCount(). See \link{vertexCount}}
  

  \item{vertexAll()}{Get all vertices in the graph after the last iteration. See \link{vertexAll}}
  

  \item{nodesAll()}{Alias for vertexAll(). See \link{vertexAll}}
  

  \item{vertices(community)}{Get all vertices belonging to the given community after the last iteration. See \link{vertices}}
  

  \item{nodes(community)}{Alias for vertices(community). See \link{vertices}}
  

  \item{communityMapping()}{Get the community mapping for all communities after the last iteration.See \link{communityMapping}}
  

  \item{time()}{Get the cumulative time spent on processing after the last iteration. See \link{time}}
  

}
}

\examples{
\dontrun{
Parameters<-matrix(c("-e","0.1"),1,2,TRUE)
dc<-DynComm(ALGORITHM$LOUVAIN,CRITERION$MODULARITY,Parameters)
dc$addRemoveEdgesFile("initial_graph.txt")
dc$communityCount()
dc$communities()
dc$communityNodeCount(1)
dc$vertices(1)
dc$communityMapping(TRUE)
dc$time()
dc$addRemoveEdgesFile("s0000000000.txt")
}

}
