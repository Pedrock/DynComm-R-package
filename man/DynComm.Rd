% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DynComm.R
\docType{class}
\name{DynComm}
\alias{DynComm}
\alias{Dyncomm}
\alias{dyncomm}
\title{DynComm}
\usage{
DynComm(algorithm, quality, parameters)
}
\arguments{
\item{parameters}{A two column matrix defining additional parameters. See
the Parameters section on this page}

\item{algorithm}{One of the available algorithms. See \code{\link{ALGORITHM}}}

\item{quality}{One of the available quality measurement functions. See \code{\link{QUALITY}}}
}
\value{
\code{DynComm} object
}
\description{
This class provides a single interface for all algorithms in the different 
languages.
It provides methods to get results of processing and to interact with the 
nodes, edges and communities.
}
\section{Parameters}{

A two column matrix defining additional parameters to be passed to the
selected algorithm and quality measurement function.
The first column names the parameter and the second defines its value.
\describe{
  \item{
  -c
  }{
  Owsinski-Zadrozny quality function parameter. Values [0.0:1.0]. Default: 0.5
  }
  \item{
  -k
  }{
  Shi-Malik quality function kappa_min value. Value > 0 . Default 1
  }
  \item{
  -w
  }{
  Treat graph as weighted. In other words, do not ignore weights for edges 
  that define them when inserting edges in the graph.
  A weight of exactly zero removes the edge instead of inserting so its
  weight is never ignored.
  Without this parameter defined or for edges that do not have a weight defined, 
  edges are assigned the default value of 1 (one).
  As an example, reading from a file may define weights (a third column) for
  some edges (defined in rows, one per row) and not for others. With this
  parameter defined, the edges that have weights that are not exactly zero,
  have their weight replaced by the default value.
  }
  \item{
  -e
  }{
  Stops when, on a cycle of the algorithm, the quality is increased by less 
  than the value given in this parameter.
  }
}
}

\section{Methods}{

\describe{

  \item{getAlgorithm()}{Get the algorithm being used. See \link{DynComm$getAlgorithm}}
  

  \item{addRemoveEdgesFile(graphAddRemoveFile)}{Add and remove edges read from a file. See \link{DynComm$addRemoveEdgesFile}}
  

  \item{quality()}{Get the quality measurement of the graph after the last iteration. See \link{DynComm$quality}}
  

  \item{communityCount()}{Get the number of communities after the last iteration. See \link{DynComm$communityCount}}
  

  \item{communities()}{Get all communities after the last iteration. See \link{DynComm$communities}}
  

  \item{communityInnerEdgesWeight(community)}{Get the sum of weights of the inner edges of the given community after the last iteration. See \link{DynComm$communityInnerEdgesWeight}}
  

  \item{communityTotalWeight(community)}{Get the sum of weights of all edges of the given community after the last iteration. See \link{DynComm$communityTotalWeight}}
  

  \item{communityEdgeWeight(source,destination)}{Get the weight of the edge that goes from source to destination after the last iteration. See \link{DynComm$communityEdgeWeight}}
  

  \item{communityNodeCount(community)}{Get the amount of nodes in the given community after the last iteration. See \link{DynComm$communityNodeCount}}
  

  \item{community(node)}{Get the community of the given node after the last iteration. See \link{DynComm$community}}
  

  \item{nodesCount()}{Get the total number of nodes after the last iteration. See \link{DynComm$nodesCount}}
  

  \item{nodesAll()}{Get all nodes in the graph after the last iteration. See \link{DynComm$nodesAll}}
  

  \item{nodes(community)}{Get all nodes belonging to the given community after the last iteration. See \link{DynComm$nodes}}
  

  \item{communityMapping()}{Get the community mapping for all communities after the last iteration.See \link{DynComm$communityMapping}}
  

  \item{time()}{Get the cumulative time spent on processing after the last iteration. See \link{DynComm$time}}
  

}
}

\examples{
dc<-DynComm(ALGORITHM$LOUVAIN,QUALITY$MODULARITY,parameters)
dc$addRemoveEdgesFile("initial_graph.txt")
dc$communityCount()
dc$communities()
dc$communityNodeCount(1)
dc$nodes(1)
dc$communityMapping(TRUE)
dc$time()
dc$addRemoveEdgesFile("s0000000000.txt")

}
